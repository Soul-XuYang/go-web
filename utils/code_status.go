package utils

import (
	"encoding/json"
	"fmt"
	"io"
	"io/fs"
	"os"
	"path/filepath"
	"sort"
	"strings"
	"time"
)

// Êñá‰ª∂ÁªüËÆ°
const (
	save_file = ".code_statistics"
	length    = 1
)

type FileStats struct {
	Files int
	Lines int
	Size  int64
}

type CodeCounter struct {
	FileTypes      map[string][]string
	IgnoreDirs     map[string]bool
	Results        map[string]FileStats
	ExtToLang      map[string]string // Êñá‰ª∂Âêç+ÂêéÁºÄ
	lastDir        string            //‰∏ä‰∏ÄÊ¨°ÂàÜÊûêÁöÑÁõÆÂΩï
	history_record *ListQueue
	totalFiles     int
	totalLines     int
}

func NewCodeCounter() *CodeCounter {
	cc := &CodeCounter{
		FileTypes: map[string][]string{
			"Go":         {".go"},
			"Python":     {".py", ".pyw"},
			"JavaScript": {".js", ".jsx", ".ts", ".tsx", ".vue"},
			"Java":       {".java"},
			"C/C++":      {".c", ".cpp", ".cc", ".h", ".hpp"},
			"HTML":       {".html", ".htm"},
			"CSS":        {".css", ".scss", ".sass", ".less"},
			"PHP":        {".php"},
			"Ruby":       {".rb"},
			"Rust":       {".rs"},
			"Shell":      {".sh", ".bash", ".zsh"},
			"Markdown":   {".md", ".markdown"},
			"YAML":       {".yml", ".yaml"},
			"JSON":       {".json"},
			"XML":        {".xml"},
			"SQL":        {".sql"},
			"txt":        {".txt"},
		},
		IgnoreDirs: map[string]bool{
			".git":         true,
			"node_modules": true,
			"vendor":       true,
			"dist":         true,
			"build":        true,
			"__pycache__":  true,
			".idea":        true,
			".vscode":      true,
			"target":       true, // Java/Scala
			"bin":          true, // Â∏∏ËßÅÊûÑÂª∫ËæìÂá∫
			"obj":          true, // .NET
			"coverage":     true,
		},
		Results:        make(map[string]FileStats),
		ExtToLang:      make(map[string]string),
		history_record: NewListQueue(), // ÂàùÂßãÂåñÂéÜÂè≤ËÆ∞ÂΩïÈòüÂàó
	}

	// ÁîüÊàêÂèçÂêëÁ¥¢ÂºïÔºöÊñá‰ª∂Âêç -> ËØ≠Ë®Ä(ÂêéÁºÄÂêç)
	for lang, files := range cc.FileTypes { //ÈÅçÂéÜËØ≠Ë®ÄÊñá‰ª∂-langÊòØÈîÆÔºåextsÊòØÂÄº
		// ÂÜÖÈÉ®ÈÅçÂéÜÊñá‰ª∂Âêç
		for _, file := range files {
			cc.ExtToLang[strings.ToLower(file)] = lang //ËΩ¨Êç¢‰∏∫Â∞èÂêç
		}
	}

	// Â∞ùËØïÂä†ËΩΩÂΩìÂâçÁöÑÂéÜÂè≤ËÆ∞ÂΩï
	cc.loadHistory()
	return cc
}

func (cc *CodeCounter) Analyze(dir string) error {
	cc.lastDir = dir //ËÆæÁΩÆ‰∏∫ÂΩìÂâçË∑ØÂæÑ
	cc.totalFiles = 0
	cc.totalLines = 0
	defer cc.save(dir)                                                               //ÊúÄÂêé‰øùÂ≠òÊñá‰ª∂
	return filepath.WalkDir(dir, func(path string, d fs.DirEntry, err error) error { //ÂÆûÁé∞Ëøô‰∏ÄÊé•Âè£
		if err != nil {
			// ÊùÉÈôêÁ≠âÈóÆÈ¢òÁõ¥Êé•Ë∑≥ËøáËØ•ËäÇÁÇπ
			return nil
		}
		name := d.Name()

		// Ë∑≥ËøáÂøΩÁï•ÁõÆÂΩï
		if d.IsDir() {
			if cc.IgnoreDirs[name] {
				return fs.SkipDir
			}
			return nil
		}

		ext := strings.ToLower(filepath.Ext(name)) //Âè™‰ºöËøîÂõûÂçï‰∏ÄÊñá‰ª∂ÁöÑÂêéÁºÄÂêçÂç≥ÊãìÂ±ïÂêç
		lang, ok := cc.ExtToLang[ext]
		if !ok {
			return nil
		}

		lines, size, err := cc.countLinesFast(path)
		if err != nil {
			// Â§ßÊñá‰ª∂/ÂºÇÂ∏∏ËØªÂ§±Ë¥•Êó∂Ë∑≥ËøáËØ•Êñá‰ª∂
			return nil
		}
		stats := cc.Results[lang]
		stats.Files++
		stats.Lines += lines
		stats.Size += size
		cc.Results[lang] = stats
		cc.totalFiles++
		cc.totalLines++
		return nil
	})
}

func (cc *CodeCounter) save(dir string) {
	now := time.Now()
	timeStr := now.Format("2006-01-02 15:04:05")
	record := map[string]string{
		"filepath": dir, // ‰øÆÊ≠£ÊãºÂÜôÈîôËØØ
		"count":    fmt.Sprintf("%d", cc.totalFiles),
		"time":     timeStr,
	}
	cc.history_record.Enqueue(record) //ËøõÈòü
	if cc.history_record.Size() > length {
		cc.history_record.Dequeue()
	}

	// ‰øùÂ≠òÂéÜÂè≤ËÆ∞ÂΩïÂà∞Êñá‰ª∂
	cc.saveHistoryToFile()
}

// saveHistoryToFile Â∞ÜÂéÜÂè≤ËÆ∞ÂΩï‰øùÂ≠òÂà∞Êñá‰ª∂
func (cc *CodeCounter) saveHistoryToFile() {
	// Ëé∑ÂèñÊâÄÊúâÂéÜÂè≤ËÆ∞ÂΩï
	records := cc.history_record.GetAll() //Ëé∑ÂèñÈòüÂàóÁöÑÊï∞ÊçÆ

	// Â∞ÜËÆ∞ÂΩïËΩ¨Êç¢‰∏∫JSONÊ†ºÂºè
	data, err := json.Marshal(records)
	if err != nil {
		fmt.Printf("Â∫èÂàóÂåñÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•: %v\n", err)
		return
	}

	// ÂàõÂª∫ÂéÜÂè≤ËÆ∞ÂΩïÊñá‰ª∂Ë∑ØÂæÑÔºà‰ΩøÁî®ÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩïÔºâ
	configDir := save_file
	if err := os.MkdirAll(configDir, 0755); err != nil {
		fmt.Printf("ÂàõÂª∫ÈÖçÁΩÆÁõÆÂΩïÂ§±Ë¥•: %v\n", err)
		return
	}

	filePath := filepath.Join(configDir, "history.json")

	// ÂÜôÂÖ•Êñá‰ª∂‰ª•Êõø‰ª£-Â¶ÇÊûúÊòØ‰øÆÊîπÂàôÊòØÊâìÂºÄÂêéÂÜô‰ºöÔºåÊàë‰ª¨ËøôÈáåÊòØË¶ÜÁõñÁõ¥Êé•ÂÜôÂÖ•
	if err := os.WriteFile(filePath, data, 0644); err != nil {
		fmt.Printf("‰øùÂ≠òÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•: %v\n", err)
		return
	}
}

// loadHistory ‰ªéÊñá‰ª∂Âä†ËΩΩÂéÜÂè≤ËÆ∞ÂΩï
func (cc *CodeCounter) loadHistory() {
	// ÂàõÂª∫ÂéÜÂè≤ËÆ∞ÂΩïÊñá‰ª∂Ë∑ØÂæÑÔºà‰ΩøÁî®ÂΩìÂâçÂ∑•‰ΩúÁõÆÂΩïÔºâ
	configDir := save_file
	filePath := filepath.Join(configDir, "history.json")

	// Ê£ÄÊü•Êñá‰ª∂ÊòØÂê¶Â≠òÂú®
	if _, err := os.Stat(filePath); os.IsNotExist(err) {
		// Êñá‰ª∂‰∏çÂ≠òÂú®ÔºåÊó†ÈúÄÂä†ËΩΩ
		return
	}

	// ËØªÂèñÊñá‰ª∂ÂÜÖÂÆπ
	data, err := os.ReadFile(filePath)
	if err != nil {
		fmt.Printf("ËØªÂèñÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•: %v\n", err)
		return
	}

	// Ëß£ÊûêJSONÊï∞ÊçÆ-Ëøô‰∏™ÊòØÈîÆÂÄºÂØπÂàáÁâáÊï∞ÊçÆ
	var records []map[string]string
	if err := json.Unmarshal(data, &records); err != nil {
		fmt.Printf("Ëß£ÊûêÂéÜÂè≤ËÆ∞ÂΩïÂ§±Ë¥•: %v\n", err)
		return
	}

	// Â∞ÜËÆ∞ÂΩïÊ∑ªÂä†Âà∞ÈòüÂàó‰∏≠-ÂæàÂÖ≥ÈîÆ
	for _, record := range records {
		cc.history_record.Enqueue(record)
	}
}

// countLinesFastÔºöÂùóËØªÂèñ + ËÆ° '\n'ÔºåÈÅøÂÖç bufio.Scanner ÁöÑ 64K ÂçïË°åÈôêÂà∂
func (cc *CodeCounter) countLinesFast(filename string) (int, int64, error) {
	f, err := os.Open(filename)
	if err != nil {
		return 0, 0, err
	}
	defer f.Close()

	buf := make([]byte, 64*1024) // 64KB Âùó
	var (
		lines    int
		size     int64
		lastByte byte = '\n' // Ëã•Êñá‰ª∂‰∏∫Á©∫Ôºå‰∏ç‰ºö +1ÔºõÈùûÁ©∫‰∏îÊúÄÂêé‰∏çÊòØ '\n'ÔºåÊúÄÂêéË°•‰∏ÄË°å
	)
	for {
		n, e := f.Read(buf)
		if n > 0 {
			size += int64(n)
			b := buf[:n]
			lastByte = b[n-1]
			// ËÆ°Êç¢Ë°å
			for i := 0; i < n; i++ {
				if b[i] == '\n' {
					lines++
				}
			}
		}
		if e == io.EOF {
			break
		}
		if e != nil {
			return lines, size, e
		}
	}
	// Êú´Â∞æÊó† '\n' ‰πüÁÆó‰∏ÄË°åÔºàÂ∏∏ËßÅ‰∫éÊúÄÂêé‰∏ÄË°åÔºâ
	if size > 0 && lastByte != '\n' {
		lines++
	}
	return lines, size, nil
}

func (cc *CodeCounter) PrintReport() {
	totalFiles := 0
	totalLines := 0
	var totalSize int64 = 0

	for _, stats := range cc.Results {
		totalFiles += stats.Files
		totalLines += stats.Lines
		totalSize += stats.Size
	}

	type LangStats struct {
		Lang  string
		Stats FileStats
	}
	var sorted []LangStats
	for lang, stats := range cc.Results {
		if stats.Files > 0 {
			sorted = append(sorted, LangStats{Lang: lang, Stats: stats})
		}
	}

	// ÊåâË°åÊï∞ÊéíÂ∫è
	sort.Slice(sorted, func(i, j int) bool {
		return sorted[i].Stats.Lines > sorted[j].Stats.Lines
	})
	fmt.Printf("üìä Êú¨È°πÁõÆGo-WebËØ¶ÁªÜ‰ª£Á†ÅÁªüËÆ°Êä•Âëä\n")
	fmt.Printf("üìÅ ÁõÆÂΩï: %s\n", cc.lastDir)
	fmt.Println(strings.Repeat("=", 75))
	fmt.Printf("%-15s %8s %12s %12s %8s\n", "ËØ≠Ë®Ä", "Êñá‰ª∂Êï∞", "‰ª£Á†ÅË°åÊï∞", "Êñá‰ª∂Â§ßÂ∞è(KB)", "Âç†ÊØî")
	fmt.Println(strings.Repeat("-", 75))

	for _, item := range sorted {
		percentage := 0.0
		if totalLines > 0 {
			percentage = float64(item.Stats.Lines) / float64(totalLines) * 100
		}
		sizeKB := float64(item.Stats.Size) / 1024.0
		fmt.Printf("%-15s %8d     %12d     %12.2f        %7.1f%%\n",
			item.Lang, item.Stats.Files, item.Stats.Lines, sizeKB, percentage)
	}

	fmt.Println(strings.Repeat("=", 75))
	fmt.Printf("%s: %d‰∏™Êñá‰ª∂Êï∞| %dË°åÊï∞ |%.2fKB\n",
		"ÊÄªËÆ°", totalFiles, totalLines, float64(totalSize)/1024.0)

	// Êñá‰ª∂Êï∞Èáè Top5
	fmt.Printf("\nüèÜ Êñá‰ª∂Êï∞ÈáèÊéíÂêç:\n")
	sort.Slice(sorted, func(i, j int) bool {
		return sorted[i].Stats.Files > sorted[j].Stats.Files
	})
	for i := 0; i < len(sorted) && i < 5; i++ {
		fmt.Printf("  %2d. %-12s: %d ‰∏™Êñá‰ª∂\n", i+1, sorted[i].Lang, sorted[i].Stats.Files)
	}
	fmt.Println(strings.Repeat("=", 80))
	fmt.Println("ÂéÜÂè≤ËÆ∞ÂΩï:")
	for index, node := range cc.history_record.GetAll() {
		if r, ok := node.(map[string]string); ok {
			fmt.Printf("Á¥¢Âºï:%d Ë∑ØÂæÑ: %s Êñá‰ª∂Êï∞: %s ËÆ∞ÂΩïÊó∂Èó¥: %s\n",
				index+1, r["filepath"], r["count"], r["time"])
		}
	}
	fmt.Println(strings.Repeat("=", 80))
}
